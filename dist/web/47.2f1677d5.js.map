{"version":3,"sources":["webpack:///../node_modules/serialize-javascript/index.js"],"names":["UID","Math","floor","random","toString","PLACE_HOLDER_REGEXP","RegExp","IS_NATIVE_CODE_REGEXP","IS_PURE_FUNCTION","IS_ARROW_FUNCTION","UNSAFE_CHARS_REGEXP","RESERVED_SYMBOLS","ESCAPED_CHARS","escapeUnsafeChars","unsafeChar","module","exports","serialize","obj","options","space","str","functions","regexps","dates","maps","sets","undefs","ignoreFunction","undefined","String","isJSON","JSON","stringify","key","value","functionKeys","push","i","length","deleteFunctions","origValue","this","type","Date","Map","Set","unsafe","replace","match","valueIndex","toISOString","source","flags","Array","from","entries","values","fn","serializedFn","test","TypeError","name","argsStartsAt","indexOf","def","substr","trim","split","filter","val","join","serializeFunc"],"mappings":"0HASA,IAAIA,EAAsBC,KAAKC,MAAsB,cAAhBD,KAAKE,UAA0BC,SAAS,IACzEC,EAAsB,IAAIC,OAAO,qBAAuBN,EAAM,cAAe,KAE7EO,EAAwB,6BACxBC,EAAmB,gBACnBC,EAAoB,WACpBC,EAAwB,sBAExBC,EAAmB,CAAC,IAAK,SAIzBC,EAAgB,CAChB,IAAU,UACV,IAAU,UACV,IAAU,UACV,SAAU,UACV,SAAU,WAGd,SAASC,EAAkBC,GACvB,OAAOF,EAAcE,GAezBC,EAAOC,QAAU,SAASC,EAAUC,EAAKC,GACrCA,IAAYA,EAAU,IAGC,iBAAZA,GAA2C,iBAAZA,IACtCA,EAAU,CAACC,MAAOD,IAGtB,IAqGIE,EArGAC,EAAY,GACZC,EAAY,GACZC,EAAY,GACZC,EAAY,GACZC,EAAY,GACZC,EAAY,GA4FhB,OALIR,EAAQS,gBAAiC,mBAARV,IACjCA,OAAMW,QAIEA,IAARX,EACOY,OAAOZ,GAeC,iBAPfG,EADAF,EAAQY,SAAWZ,EAAQC,MACrBY,KAAKC,UAAUf,GAEfc,KAAKC,UAAUf,EAAKC,EAAQY,OAAS,KAnG/C,SAAkBG,EAAKC,GAOnB,GAJGhB,EAAQS,gBAhCnB,SAAyBV,GACrB,IAAIkB,EAAe,GACnB,IAAK,IAAIF,KAAOhB,EACY,mBAAbA,EAAIgB,IACXE,EAAaC,KAAKH,GAG1B,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,WAC9BpB,EAAIkB,EAAaE,IAyBpBE,CAAgBL,IAGfA,QAAmBN,IAAVM,EACV,OAAOA,EAKX,IAAIM,EAAYC,KAAKR,GACjBS,SAAcF,EAElB,GAAa,WAATE,EAAmB,CACnB,GAAGF,aAAqBnC,OACpB,MAAO,QAAUN,EAAM,KAAOuB,EAAQc,KAAKI,GAAa,GAAK,MAGjE,GAAGA,aAAqBG,KACpB,MAAO,QAAU5C,EAAM,KAAOwB,EAAMa,KAAKI,GAAa,GAAK,MAG/D,GAAGA,aAAqBI,IACpB,MAAO,QAAU7C,EAAM,KAAOyB,EAAKY,KAAKI,GAAa,GAAK,MAG9D,GAAGA,aAAqBK,IACpB,MAAO,QAAU9C,EAAM,KAAO0B,EAAKW,KAAKI,GAAa,GAAK,MAIlE,MAAa,aAATE,EACO,QAAU3C,EAAM,KAAOsB,EAAUe,KAAKI,GAAa,GAAK,MAGtD,cAATE,EACO,QAAU3C,EAAM,KAAO2B,EAAOU,KAAKI,GAAa,GAAK,MAGzDN,GAyDqDhB,EAAQC,QAM7DU,OAAOT,KAMK,IAAnBF,EAAQ4B,SACR1B,EAAMA,EAAI2B,QAAQtC,EAAqBG,IAGlB,IAArBS,EAAUiB,QAAmC,IAAnBhB,EAAQgB,QAAiC,IAAjBf,EAAMe,QAAgC,IAAhBd,EAAKc,QAAgC,IAAhBb,EAAKa,QAAkC,IAAlBZ,EAAOY,OAClHlB,EAMJA,EAAI2B,QAAQ3C,GAAqB,SAAU4C,EAAON,EAAMO,GAC3D,MAAa,MAATP,EACO,aAAgBnB,EAAM0B,GAAYC,cAAgB,KAGhD,MAATR,EACO,cAAgB1B,EAAUM,EAAQ2B,GAAYE,QAAU,MAAS7B,EAAQ2B,GAAYG,MAAQ,KAG3F,MAATV,EACO,WAAa1B,EAAUqC,MAAMC,KAAK9B,EAAKyB,GAAYM,WAAYrC,GAAW,IAGxE,MAATwB,EACO,WAAa1B,EAAUqC,MAAMC,KAAK7B,EAAKwB,GAAYO,UAAWtC,GAAW,IAGvE,MAATwB,EACO,YA/Ff,SAAuBe,GACrB,IAAIC,EAAeD,EAAGtD,WACtB,GAAIG,EAAsBqD,KAAKD,GAC3B,MAAM,IAAIE,UAAU,gCAAkCH,EAAGI,MAI7D,GAAGtD,EAAiBoD,KAAKD,GACrB,OAAOA,EAIX,GAAGlD,EAAkBmD,KAAKD,GACtB,OAAOA,EAGX,IAAII,EAAeJ,EAAaK,QAAQ,KACpCC,EAAMN,EAAaO,OAAO,EAAGH,GAC9BI,OACAC,MAAM,KACNC,QAAO,SAASC,GAAO,OAAOA,EAAI/B,OAAS,KAO9C,OALyB0B,EAAII,QAAO,SAASC,GAC3C,OAA0C,IAAnC3D,EAAiBqD,QAAQM,MAIZ/B,OAAS,GACnB0B,EAAID,QAAQ,UAAY,EAAI,SAAW,IAAM,YAChDC,EAAIM,KAAK,IAAIP,QAAQ,MAAQ,EAAI,IAAM,IACxCL,EAAaO,OAAOH,GAIrBJ,EAkEEa,CAFElD,EAAU4B","file":"47.2f1677d5.js","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID                 = Math.floor(Math.random() * 0x10000000000).toString(16);\nvar PLACE_HOLDER_REGEXP = new RegExp('\"@__(F|R|D|M|S|U)-' + UID + '-(\\\\d+)__@\"', 'g');\n\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar IS_PURE_FUNCTION = /function.*?\\(/;\nvar IS_ARROW_FUNCTION = /.*?=>.*?/;\nvar UNSAFE_CHARS_REGEXP   = /[<>\\/\\u2028\\u2029]/g;\n\nvar RESERVED_SYMBOLS = ['*', 'async'];\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n    '<'     : '\\\\u003C',\n    '>'     : '\\\\u003E',\n    '/'     : '\\\\u002F',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n    return ESCAPED_CHARS[unsafeChar];\n}\n\nfunction deleteFunctions(obj){\n    var functionKeys = [];\n    for (var key in obj) {\n        if (typeof obj[key] === \"function\") {\n            functionKeys.push(key);\n        }\n    }\n    for (var i = 0; i < functionKeys.length; i++) {\n        delete obj[functionKeys[i]];\n    }\n}\n\nmodule.exports = function serialize(obj, options) {\n    options || (options = {});\n\n    // Backwards-compatibility for `space` as the second argument.\n    if (typeof options === 'number' || typeof options === 'string') {\n        options = {space: options};\n    }\n\n    var functions = [];\n    var regexps   = [];\n    var dates     = [];\n    var maps      = [];\n    var sets      = [];\n    var undefs    = [];\n\n    // Returns placeholders for functions and regexps (identified by index)\n    // which are later replaced by their string representation.\n    function replacer(key, value) {\n\n        // For nested function\n        if(options.ignoreFunction){\n            deleteFunctions(value);\n        }\n\n        if (!value && value !== undefined) {\n            return value;\n        }\n\n        // If the value is an object w/ a toJSON method, toJSON is called before\n        // the replacer runs, so we use this[key] to get the non-toJSONed value.\n        var origValue = this[key];\n        var type = typeof origValue;\n\n        if (type === 'object') {\n            if(origValue instanceof RegExp) {\n                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Date) {\n                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Map) {\n                return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Set) {\n                return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';\n            }\n        }\n\n        if (type === 'function') {\n            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'undefined') {\n            return '@__U-' + UID + '-' + (undefs.push(origValue) - 1) + '__@';\n        }\n\n        return value;\n    }\n\n    function serializeFunc(fn) {\n      var serializedFn = fn.toString();\n      if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n          throw new TypeError('Serializing native function: ' + fn.name);\n      }\n\n      // pure functions, example: {key: function() {}}\n      if(IS_PURE_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      // arrow functions, example: arg1 => arg1+5\n      if(IS_ARROW_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      var argsStartsAt = serializedFn.indexOf('(');\n      var def = serializedFn.substr(0, argsStartsAt)\n        .trim()\n        .split(' ')\n        .filter(function(val) { return val.length > 0 });\n\n      var nonReservedSymbols = def.filter(function(val) {\n        return RESERVED_SYMBOLS.indexOf(val) === -1\n      });\n\n      // enhanced literal objects, example: {key() {}}\n      if(nonReservedSymbols.length > 0) {\n          return (def.indexOf('async') > -1 ? 'async ' : '') + 'function'\n            + (def.join('').indexOf('*') > -1 ? '*' : '')\n            + serializedFn.substr(argsStartsAt);\n      }\n\n      // arrow functions\n      return serializedFn;\n    }\n\n    // Check if the parameter is function\n    if (options.ignoreFunction && typeof obj === \"function\") {\n        obj = undefined;\n    }\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (obj === undefined) {\n        return String(obj);\n    }\n\n    var str;\n\n    // Creates a JSON string representation of the value.\n    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n    if (options.isJSON && !options.space) {\n        str = JSON.stringify(obj);\n    } else {\n        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n    }\n\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (typeof str !== 'string') {\n        return String(str);\n    }\n\n    // Replace unsafe HTML and invalid JavaScript line terminator chars with\n    // their safe Unicode char counterpart. This _must_ happen before the\n    // regexps and functions are serialized and added back to the string.\n    if (options.unsafe !== true) {\n        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n    }\n\n    if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0 && undefs.length === 0) {\n        return str;\n    }\n\n    // Replaces all occurrences of function, regexp, date, map and set placeholders in the\n    // JSON string with their string representations. If the original value can\n    // not be found, then `undefined` is used.\n    return str.replace(PLACE_HOLDER_REGEXP, function (match, type, valueIndex) {\n        if (type === 'D') {\n            return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n        }\n\n        if (type === 'R') {\n            return \"new RegExp(\" + serialize(regexps[valueIndex].source) + \", \\\"\" + regexps[valueIndex].flags + \"\\\")\";\n        }\n\n        if (type === 'M') {\n            return \"new Map(\" + serialize(Array.from(maps[valueIndex].entries()), options) + \")\";\n        }\n\n        if (type === 'S') {\n            return \"new Set(\" + serialize(Array.from(sets[valueIndex].values()), options) + \")\";\n        }\n\n        if (type === 'U') {\n            return 'undefined'\n        }\n\n        var fn = functions[valueIndex];\n\n        return serializeFunc(fn);\n    });\n}\n"],"sourceRoot":""}